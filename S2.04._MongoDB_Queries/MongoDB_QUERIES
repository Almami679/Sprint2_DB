MongoDB QUERIES (Realizadas con Mongo DB SHell)



1. ver todos los objetos de la coleccion 

> db.getCollection('restaurants').find({})



2. restaurant_id, name, borough i cuisine de todos los objetos

> > db.getCollection('restaurants').find({}, {restaurant_id : 1, name : 1, borough : 1, cuisine : 1})



3. restaurant_id, name, borough i cuisine de todos los objetos (excluyendo el _id)

> db.getCollection('restaurants').find({}, {restaurant_id : 1, name : 1, borough : 1, cuisine : 1, _id : 0}) 



4. restaurant_id, name, borough, i zip code de todos los objetos (excluyendo el _id)

> db.getCollection('restaurants').find({}, { 'address.zipcode' : 1, restaurant_id : 1, name : 1, borough : 1, _id : 0})



5. restaurants en el bronx

> db.getCollection('restaurants').find({borough : 'Bronx'}, {name : 1, _id : 0})



6. los 5 primeros restaurantes del bronx

> db.getCollection('restaurants').find({borough : 'Bronx'}, {name : 1, _id : 0}).limit(5)



7. los 5 proximos desspues de los 5 primeros del bronx

> db.getCollection('restaurants').find({borough : 'Bronx'}, {name : 1, _id : 0}).skip(5).limit(5)



8. restaurantes con score > 90

> db.getCollection('restaurants').find({'grades.score' : {$gt : 90}}, {name : 1, borough : 1, _id : 0})



9. restaurantes con score > 80 y < 100

> db.getCollection('restaurants').find({$and : [{'grades.score' : {$gt : 80}}, {'grades.score' : {$lt : 100}}]}, {name : 1, borough : 1, _id : 0})



10. restaurantes con latitud menos de -95.754168.

> db.getCollection('restaurants').find({'address.coord.0' : {$lt : -95.754168 }}, {name : 1, borough : 1, 'address.coord' : 1, _id : 0})



11. no son 'American', score superior a 70 i longitud inferior a -65.754168. (El nombre de 'American ' en la DB tiene un espacio de mas al final)

> db.getCollection('restaurants').find({$and : [{'grades.score' : {$gt : 70}},{'address.coord.0' : {$lt : -65.754168}},{'cuisine' : {$ne : 'American '}}]}, {name : 1, borough : 1, _id : 0})



12. la consulta anterior sin el operador $and

> db.getCollection('restaurants').find({'grades.score' : {$gt : 70},'address.coord.0' : {$lt : -65.754168},'cuisine' : {$ne : 'American '}}, {name : 1, borough : 1, _id : 0})



13. restaurantes no 'American', puntuacion grado 'A' y que no son de Brooklyn. Orden cuisine de A-Z

> db.getCollection('restaurants').find({borough : {$ne : 'Brooklyn'},'grades.grade' : 'A',cuisine : {$ne : 'American '}}, {name : 1, borough : 1,cuisine : 1, _id : 0}).sort({ cuisine : 1})



14. restaurant_id, name, borough i cuisine de los restaurants que el nombre empieza por 'Wil' 

> db.getCollection('restaurants').find({name:{$regex: '^Wil'}}, {restaurant_id : 1, name : 1, borough : 1,cuisine : 1, _id : 0})



15. restaurant_id, name, borough i cuisine de los restaurants que el nombre acaba por 'ces'

> db.getCollection('restaurants').find({name:{$regex: 'ces$'}}, {restaurant_id : 1, name : 1, borough : 1,cuisine : 1, _id : 0})



16. restaurant_id, name, borough i cuisine de los restaurants que el nombre contiene 'reg'

> db.getCollection('restaurants').find({name:{$regex: 'Reg'}}, {restaurant_id : 1, name : 1, borough : 1,cuisine : 1, _id : 0})



17. restaurantes del bronx que preparan platos americanos o xinos

> db.getCollection('restaurants').find({borough:'Bronx', cuisine: {$in: ['American ', 'Chinese']}}, {name : 1, borough : 1,cuisine : 1, _id : 0})



18. restaurant_id, name, borough i cuisine de los restaurants que estan en [Staten Island, Queens, Bronx, Brooklyn]

> db.getCollection('restaurants').find({borough: {$in: ['Staten Island', 'Queens', 'Bronx', 'Brooklyn']}}, {restaurant_id : 1, name : 1, borough : 1,cuisine : 1, _id : 0})



19. restaurant_id, name, borough i cuisine de los restaurants que no estan en [Staten Island, Queens, Bronx, Brooklyn]

> db.getCollection('restaurants').find({borough: {$nin: ['Staten Island', 'Queens', 'Bronx', 'Brooklyn']}}, {restaurant_id : 1, name : 1, borough : 1,cuisine : 1, _id : 0})



20. restaurant_id, name, borough i cuisine de los restaurants con score < 10

> db.getCollection('restaurants').find({'grades.score' : {$lt : 10}}, {restaurant_id : 1, name : 1, borough :
 1,cuisine : 1, _id : 0})



 21. restaurant_id, name, borough i cuisine de los restaurantes que cuisine = Seafood excepto 'American' i 'Chinees' o el nombre empieza por 'Wil' 

> db.getCollection('restaurants').find({$and: [{cuisine: 'Seafood'}, {$or:[{cuisine: {$nin:['Chinese', 'American ']}}, {name: {$ne:{$regex:"^Wil"}}}]}]},{restaurant_id:1, name:1, borough:1, cuisine:1, _id:0});



22. restaurant_id, name, i grades de los restaurantes con grado "A" i un score 11 en el estudio ISODate "2014-08-11T00:00:00Z"

> db.restaurants.find({"grades":{ $elemMatch:{"grade":"A","score":11,"date":ISODate("2014-08-11T00:00:00Z")}}},{restaurant_id:1, name:1, grades:1});



23. restaurant_id, name i grades de los restaurantes donde el 2n elemento grades.grade = "A" i score 9 en ISODate "2014-08-11T00:00:00Z".

db.getCollection('restaurants').find({$and : [{'grades.1.grade' : "A"}, {'grades.1.score': 9}, {'grades.1.date': ISODate("2014-08-11")}]}, {restaurant_id: 1, name: 1, grades: 1, _id: 0});



24. restaurant_id, name, address i coords de los restaurantes donde el 2n elemento address.coord > 42 i < 52

> db.getCollection('restaurants').find({'address.coord.1': {$gt:42,$lte:52}}, {restaurant_id:1, name:1, address: 1, _id:0 });




25. restaurants en orden A-Z con todas sus columnas

> db.getCollection('restaurants').find({}).sort({name:1})



26. restaurants en orden Z-A con todas sus columnas

> db.getCollection('restaurants').find({}).sort({name:-1})



27. cocina y barrio en orden ascendente

> db.getCollection('restaurants').find().sort({cuisine: 1, borough: -1});



28. todos los restaurantes que no tienen calle en el campo address

> db.getCollection('restaurants').find({'address.street': {$exists: false}}, {name: 1, address: 1, _id: 0});



29. todos los restaurantes donde coord es un valor Double

> db.getCollection('restaurants').find({'address.coord.0': { $type: 'double'},'address.coord.1': {$type: 'double'}}, {name: 1, address: 1, _id: 0});

o tambien:

> db.getCollection('restaurants').find({'address.coord.0': { $type: 1},'adress.coord.1': {$type: 1}}, {name: 1, address: 1, _id: 0});



30. restaurantes con % = 0 en score/7

> db.getCollection('restaurants').find({'grades.score': {$mod:[7, 0]}}, {restaurant_id: 1, name: 1, 'grades.score': 1});



31. name, borough, coords i cuisine de los restaurantes que contienen 'mon' en su nombre.

> db.getCollection('restaurants').find({name: {$regex: 'mon'}}, {name:1, borough:1, 'address.coord': 1, cuisine: 1,_id: 0});



32. name, borough, coords i cuisine de los restaurantes que su nombre empieza por 'Mad'.

> db.getCollection('restaurants').find({name: {$regex: '^Mad'}}, {name:1, borough:1, 'address.coord': 1, cuisine: 1,_id: 0});
